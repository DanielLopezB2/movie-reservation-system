generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Genre {
  id         BigInt       @id
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  MovieGenre MovieGenre[]
}

model Movie {
  id          BigInt       @id
  title       String
  overview    String
  posterImage String
  duration    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  MovieGenre  MovieGenre[]
  Showtimes   Showtimes[]
}

model MovieGenre {
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId BigInt
  genre   Genre  @relation(fields: [genreId], references: [id])
  genreId BigInt

  @@id([movieId, genreId])
}

model Rooms {
  id         Int       @id @default(autoincrement())
  name       String
  totalSeats Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  seats     Seats[]
  showtimes Showtimes[]
}

model Seats {
  id        Int       @id @default(autoincrement())
  roomId    Int
  row       String
  number    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Rooms         Rooms?          @relation(fields: [roomId], references: [id])
  ReservedSeats ReservedSeats[]
}

model Showtimes {
  id               String    @id @default(uuid())
  movieId          BigInt
  date             DateTime
  roomId           Int
  availableTickets Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  Rooms        Rooms?         @relation(fields: [roomId], references: [id])
  Reservations Reservations[]
  Movie        Movie?         @relation(fields: [movieId], references: [id])
}

model Reservations {
  id         Int       @id @default(autoincrement())
  showtimeId String
  userId     String
  price      Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  Showtimes     Showtimes?      @relation(fields: [showtimeId], references: [id])
  ReservedSeats ReservedSeats[]
}

model ReservedSeats {
  id            Int       @id @default(autoincrement())
  seatId        Int
  reservationId Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  Seats        Seats?        @relation(fields: [seatId], references: [id])
  Reservations Reservations? @relation(fields: [reservationId], references: [id])
}
